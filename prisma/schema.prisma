// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                     String        @id @default(cuid())
  email                  String        @unique
  phoneNumber            String        @unique
  firstName              String
  lastName               String
  location               String
  bio           String              @default("")
  events                  Event[]
  Response               Response[]
  coverPhoto          String?
  profilePhoto        String?
  sentFriendRequests     Friendship[]  @relation("senderRelation")
  receivedFriendRequests Friendship[]  @relation("receiverRelation")
  friends                UserFriends[]
  friendsOf              UserFriends[] @relation("UserFriendsFriend")

  EventInviteInviter EventInvite[] @relation("EventInviteInviter")
  EventInviteInvitee EventInvite[] @relation("EventInviteInvitee")
  comments           Comment[]
  photos             Photo[]
}

model UserFriends {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  friendId  String
  friend    User     @relation("UserFriendsFriend", fields: [friendId], references: [id])
  createdAt DateTime @default(now())
}

model Friendship {
  id         String   @id @default(cuid())
  status     String
  senderId   String
  receiverId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  sender   User @relation("senderRelation", fields: [senderId], references: [id])
  receiver User @relation("receiverRelation", fields: [receiverId], references: [id])
}

model Event {
  id          String        @id @default(cuid())
  userId      String
  user        User          @relation(fields: [userId], references: [id])
  location    String
  category   String @default("Eating")
  title       String
  startDate   String
  endDate     String
  description String
  coverPhoto  String?
  eventPhotos Photo[]
  privacy     String
  responses   Response[]
  EventInvite EventInvite[]
  createdOn   String
  comments    Comment[]
}

model Photo {
  id      String @id @default(cuid())
  url     String
  Event   Event  @relation(fields: [eventId], references: [id])
  eventId String
  user   User   @relation(fields: [userId], references: [id])
  userId String
  caption String
}

model Response {
  id       String @id @default(cuid())
  userId   String
  user     User   @relation(fields: [userId], references: [id])
  eventId  String
  event    Event  @relation(fields: [eventId], references: [id])
  response Int
}

model EventInvite {
  id        String   @id @default(cuid())
  inviterId String
  inviter   User     @relation("EventInviteInviter", fields: [inviterId], references: [id])
  inviteeId String
  invitee   User     @relation("EventInviteInvitee", fields: [inviteeId], references: [id])
  eventId   String
  event     Event    @relation(fields: [eventId], references: [id])
  createdOn DateTime @default(now())
}

model Comment {
  id        String   @id @default(cuid())
  createdOn DateTime @default(now())
  eventId   String
  event     Event    @relation(fields: [eventId], references: [id])
  content   String
  imageUrl  String?
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}
