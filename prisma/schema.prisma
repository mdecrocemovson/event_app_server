// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                     String          @id @default(cuid())
  email                  String          @unique
  firstName              String
  lastName               String
  location               String
  idealPlans             String
  Event                  Event[]
  Response               Response[]
  coverPhotoKey          String?
  profilePhotoKey        String?
  FriendRequestRequestor FriendRequest[] @relation("FriendRequestRequestor")
  FriendRequestReceiver  FriendRequest[] @relation("FriendRequestReceiver")

  EventInviteInviter EventInvite[] @relation("EventInviteInviter")
  EventInviteInvitee EventInvite[] @relation("EventInviteInvitee")
  friendships        Friendship[]
  comments           Comment[]
}

model Friendship {
  id            String   @id @default(cuid())
  friends       User[]
  createdAt     DateTime @default(now())
  mutualFriends Int      @default(1)

}

model FriendRequest {
  id          String   @id @default(cuid())
  status      String
  requestDate DateTime @default(now())
  requestorId String
  requestor   User     @relation("FriendRequestRequestor", fields: [requestorId], references: [id])
  receiverId  String
  receiver    User     @relation("FriendRequestReceiver", fields: [receiverId], references: [id])
}

model Event {
  id          String        @id @default(cuid())
  userId      String
  user        User          @relation(fields: [userId], references: [id])
  location    String
  title       String
  startDate   String
  endDate     String
  description String
  coverPhoto  String?
  privacy     String
  responses   Response[]
  EventInvite EventInvite[]
  createdOn   DateTime      @default(now())
  comments    Comment[]
}

model Response {
  id       String @id @default(cuid())
  userId   String
  user     User   @relation(fields: [userId], references: [id])
  eventId  String
  event    Event  @relation(fields: [eventId], references: [id])
  response Int
}

model EventInvite {
  id        String   @id @default(cuid())
  inviterId String
  inviter   User     @relation("EventInviteInviter", fields: [inviterId], references: [id])
  inviteeId String
  invitee   User     @relation("EventInviteInvitee", fields: [inviteeId], references: [id])
  eventId   String
  event     Event    @relation(fields: [eventId], references: [id])
  createdOn DateTime @default(now())
}

model Comment {
  id        String   @id @default(cuid())
  createdOn DateTime @default(now())
  eventId   String
  event     Event    @relation(fields: [eventId], references: [id])
  content   String
  imageUrl  String?
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}
